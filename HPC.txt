MERGE SORT




#include<iostream>
#include<stdlib.h>
#include<omp.h>
#define MAX 100
using namespace std;

void mergesort(int a[], int l, int h);
void merge(int a[], int l, int h, int m);
void mergesort(int a[], int l, int h)
{
    int mid;
    if (l < h)
    {
        mid = (l + h) / 2;
        #pragma omp parallel sections 
        {
            #pragma omp section
            {
                mergesort(a, l, mid);
            }
            #pragma omp section
            {
                mergesort(a, mid + 1, h);
            }
        }
        merge(a, l, h, mid);
    }
}
void merge(int a[], int low, int high, int mid)
{
    int size = (high - low) + 1;
    int i, j, k, temp[MAX];
    i = low; k = 0; j = mid + 1;
    // Merge the two parts into temp[]
    while (i <= mid && j <= high)
    {
        if (a[i] < a[j])
        {
            temp[k] = a[i];
            k++;
            i++;
        }
        else
        {
            temp[k] = a[j];
            k++;
            j++;
        }
    }
    /* Insert all the remaining values from i to mid into temp[] */
    while (i <= mid)
    {
        temp[k] = a[i];
        k++;
        i++;
    }
    /* Insert all the remaining values from j 	to high into temp[] */
    while (j <= high)
    {
        temp[k] = a[j];
        k++;
        j++;
    }
    /* Assign sorted data stored in temp[] to 	a[] */
    for (i = low; i <= high; i++)
    {
        a[i] = temp[i - low];
    }
}



int main()
{
   //int* a, n, i;
int a[20],n,i;
    cout << "\n enter total no of elements=>";
    cin >> n;
   for(i=0;i<n;i++)
	{
		cin>>a[i];
	}
   cout << "\n Unsorted Elements=>\n";
   
    for (i = 0; i < n; i++)
    {
        cout << "\t" << a[i];
    }
    mergesort(a, 0, n - 1);
    cout << "\n sorted array is=>";
   
    for (i = 0; i < n; i++)
    {
        cout << "\t" << a[i];
    }
    return 0;
}



























Parallel BFS





#include<iostream>

#include<stdlib.h>

#include<queue>

using namespace std;





class node

{

   public:

    

    node *left, *right;

    int data;



};    



class Breadthfs

{

 

 public:

 

 node *insert(node *, int);

 void bfs(node *);

 

};





node *insert(node *root, int data)

// inserts a node in tree

{



    if(!root)

    {

   	 

   	 root=new node;

   	 root->left=NULL;

   	 root->right=NULL;

   	 root->data=data;

   	 return root;

    }



    queue<node *> q;

    q.push(root);

    

    while(!q.empty())

    {



   	 node *temp=q.front();

   	 q.pop();

    

   	 if(temp->left==NULL)

   	 {

   		 

   		 temp->left=new node;

   		 temp->left->left=NULL;

   		 temp->left->right=NULL;

   		 temp->left->data=data;    

   		 return root;

   	 }

   	 else

   	 {



   	 q.push(temp->left);



   	 }



   	 if(temp->right==NULL)

   	 {

   		 

   		 temp->right=new node;

   		 temp->right->left=NULL;

   		 temp->right->right=NULL;

   		 temp->right->data=data;    

   		 return root;

   	 }

   	 else

   	 {



   	 q.push(temp->right);



   	 }



    }

    

}



void bfs(node *head)

{



   	 queue<node*> q;

   	 q.push(head);

   	 

   	 int qSize;

   	 

   	 while (!q.empty())

   	 {

   		 qSize = q.size();

   		 #pragma omp parallel for

            	//creates parallel threads

   		 for (int i = 0; i < qSize; i++)

   		 {

   			 node* currNode;

   			 #pragma omp critical

   			 {

   			   currNode = q.front();

   			   q.pop();

   			   cout<<"\t"<<currNode->data;

   			   

   			 }// prints parent node

   			 #pragma omp critical

   			 {

   			 if(currNode->left)// push parent's left node in queue

   				 q.push(currNode->left);

   			 if(currNode->right)

   				 q.push(currNode->right);

   			 }// push parent's right node in queue   	 



   		 }

   	 }



}



int main(){



    node *root=NULL;

    int data;

    char ans;

    

    do

    {

   	 cout<<"\n enter data=>";

   	 cin>>data;

   	 

   	 root=insert(root,data);

    

   	 cout<<"do you want insert one more node?";

   	 cin>>ans;

    

    }while(ans=='y'||ans=='Y');

    

    bfs(root);

    

    return 0;

}



































Parallel DFS







#include <iostream>

#include <vector>

#include <stack>

#include <omp.h>



using namespace std;



const int MAX = 100000;

vector<int> graph[MAX];

bool visited[MAX];



void dfs(int node) {

	stack<int> s;

	s.push(node);



	while (!s.empty()) {

    	int curr_node = s.top();

    	s.pop();



    	if (!visited[curr_node]) {

        	visited[curr_node] = true;

        	

        	if (visited[curr_node]) {

        	cout << curr_node << " ";

    	}



        	#pragma omp parallel for

        	for (int i = 0; i < graph[curr_node].size(); i++) {

            	int adj_node = graph[curr_node][i];

            	if (!visited[adj_node]) {

                	s.push(adj_node);

            	}

        	}

    	}

	}

}



int main() {

	int n, m, start_node;

	cout << "Enter No of Node,Edges,and start node:" ;

	cin >> n >> m >> start_node;

         //n: node,m:edges

         

cout << "Enter Pair of edges:" ;

	for (int i = 0; i < m; i++) {

    	int u, v;

    		

    	cin >> u >> v;

//u and v: Pair of edges

    	graph[u].push_back(v);

    	graph[v].push_back(u);

	}



	#pragma omp parallel for

	for (int i = 0; i < n; i++) {

    	visited[i] = false;

	}



	dfs(start_node);



/*	for (int i = 0; i < n; i++) {

    	if (visited[i]) {

        	cout << i << " ";

    	}

	}*/



	return 0;

}































Parallel Bubble Sort






#include <iostream>

#include <vector>

#include <omp.h>

using namespace std;



void bubble_sort_odd_even(vector<int> &arr)

{

    bool isSorted = false;

    while (!isSorted)

    {

        isSorted = true;

        #pragma omp parallel for

        for (int i = 0; i < arr.size() - 1; i++)

        {

            if (i % 2 == 0)

            {

                if (arr[i] > arr[i + 1])

                {

                    swap(arr[i], arr[i + 1]);

                    isSorted = false;

                }

            }

            else

            {

                if (arr[i] > arr[i + 1])

                {

                    swap(arr[i], arr[i + 1]);

                    isSorted = false;

                }

            }

        }

        #pragma omp barrier

    }

}



int main()

{

    vector<int> arr = {5, 2, 9, 1, 7, 6, 8, 3, 4};

    double start, end;



    // Measure performance of parallel bubble sort using odd-even transposition

    start = omp_get_wtime();

    bubble_sort_odd_even(arr);

    end = omp_get_wtime();



    cout << "Sorted array: ";

    for (int i = 0; i < arr.size(); i++)

    {

        cout << arr[i] << " ";

    }

    cout << endl;



    cout << "Parallel bubble sort using odd-even transposition time: " << end - start << " seconds" << endl;



    return 0;

}







This command

g++ -fopenmp Bubble.cpp -o Bubble






























Parallel Min Max








#include <iostream>
#include <limits.h>
#include <vector>
#include <omp.h>
using namespace std;
void min_reduction(vector<int> &arr)
{
    int min_value = INT_MAX;
#pragma omp parallel for reduction(min : min_value)
    for (int i = 0; i < arr.size(); i++)
    {
        if (arr[i] < min_value)
        {
            min_value = arr[i];
        }
    }
    cout << "Minimum value: " << min_value << endl;
}
void max_reduction(vector<int> &arr)
{
    int max_value = INT_MIN;
#pragma omp parallel for reduction(max : max_value)
    for (int i = 0; i < arr.size(); i++)
    {
        if (arr[i] > max_value)
        {
            max_value = arr[i];
        }
    }
    cout << "Maximum value: " << max_value << endl;
}
void sum_reduction(vector<int> &arr)
{
    int sum = 0;
#pragma omp parallel for reduction(+ : sum)
    for (int i = 0; i < arr.size(); i++)
    {
        sum += arr[i];
    }
    cout << "Sum: " << sum << endl;
}
void average_reduction(vector<int> &arr)
{
    int sum = 0;
#pragma omp parallel for reduction(+ : sum)
    for (int i = 0; i < arr.size(); i++)
    {
        sum += arr[i];
    }
    cout << "Average: " << (double)sum / arr.size() << endl;
}
int main()
{
    vector<int> arr = {5, 2, 9, 1, 7, 6, 8, 3, 4};
    min_reduction(arr);
    max_reduction(arr);
    sum_reduction(arr);
    average_reduction(arr);
}












